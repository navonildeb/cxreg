lambda0 <- 1
TT <- 10000
lambda <- Yt <- vector("numeric",TT)
for (t in 1:TT){
if( t == 1){
lambda[1] <- lambda0
Yt[1] <- rpois(1,lambda0)
}else{
lambda[t] <- 2 + 0.333*lambda[(t-1)] + 0.666*Yt[(t-1)]
Yt[t] <- rpois(1,lambda[t])
}
}
plot.ts(Yt)
lambda0 <- 1
TT <- 10000
lambda <- Yt <- vector("numeric",TT)
for (t in 1:TT){
if( t == 1){
lambda[1] <- lambda0
Yt[1] <- rpois(1,lambda0)
}else{
lambda[t] <- 2 + 0.335*lambda[(t-1)] + 0.666*Yt[(t-1)]
Yt[t] <- rpois(1,lambda[t])
}
}
plot.ts(Yt)
gc()
library(cglasso)
data(QuickStartExample)
x <- QuickStartExample$x
y <- QuickStartExample$y
fit <- classo(x, y)
plot(fit)
coef(fit, s = 0.1)
print(fit)
set.seed(29)
nx <- array(rnorm(5*20), c(5,20)) + (1+1i) * array(rnorm(5*20), c(5,20))
for (j in 1:20) nx[,j] <- nx[,j] / sqrt(mean(Mod(nx[,j])^2))
predict(fit, newx = nx, s = c(0.1, 0.05))
set.seed(29)
nx <- array(rnorm(5*20), c(5,20)) + (1+1i) * array(rnorm(5*20), c(5,20))
for (j in 1:20) nx[,j] <- nx[,j] / sqrt(mean(Mod(nx[,j])^2))
predict(fit, newx = nx, s = c(0.1, 0.05))
cvfit <- cv.classo(x, y)
plot(cvfit)
cvfit$lambda.min
coef(cvfit, s = "lambda.min")
cvfit$lambda.min
coef(cvfit, s = "lambda.min")
predict(cvfit, newx = x[1:5,], s = "lambda.min")
library(devtools)
devtools::install_github("yk748/cxreg")
library(cxreg)
data(QuickStartExample)
x <- QuickStartExample$x
y <- QuickStartExample$y
fit <- classo(x, y)
plot(fit)
coef(fit, s = 0.1)
set.seed(29)
nx <- array(rnorm(5*20), c(5,20)) + (1+1i) * array(rnorm(5*20), c(5,20))
for (j in 1:20) nx[,j] <- nx[,j] / sqrt(mean(Mod(nx[,j])^2))
predict(fit, newx = nx, s = c(0.1, 0.05))
cvfit <- cv.classo(x, y)
cvfit$lambda.min
predict(cvfit, newx = x[1:5,], s = "lambda.min")
library(devtools)
devtools::install_github("yk748/cxreg")
library(cxreg)
data(QuickStartExample)
x <- QuickStartExample$x
y <- QuickStartExample$y
fit <- classo(x, y)
plot(fit)
plotCoef <- function(beta,norm,lambda,df,dev,label=FALSE,
xvar=c("norm","lambda"),xlab=iname,...){
##beta should be in "dgCMatrix" format
which <- nonzeroCoef(beta)
nwhich <- length(which)
switch(nwhich+1,#we add one to make switch work
"0"={warning("No plot produced since all coefficients zero")
return()
},
"1"=warning("1 or less nonzero coefficients; classo plot is not meaningful")
)
beta <- as.matrix(beta[which,,drop=FALSE])
# ------------------------------------------------ #
xvar<-match.arg(xvar)
switch(xvar,
"norm"={
index=if(missing(norm))apply(abs(beta),2,sum)else norm
iname="L1 Norm"
approx.f=1
},
"lambda"={
index=log(lambda)
iname="Log Lambda"
approx.f=0
}
# "dev"= {
#   index=dev
#   iname="Fraction Deviance Explained"
#   approx.f=1
# }
)
# ------------------------------------------------ #
dotlist <- list(...)
type <- dotlist$type
if(is.null(type)){
par(mfrow=c(2,1),mar=c(4,4,2,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",type="l",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",type="l",...)
} else {
par(mfrow=c(2,1),mar=c(4,4,2,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",...)
}
par()
atdf <- pretty(index)
# ------------------------------------------------ #
### compute df by interpolating to df at next smaller lambda
prettydf <- approx(x=index,y=df,xout=atdf,rule=2,method="constant",f=approx.f)$y
# prettydf=ceiling(approx(x=index,y=df,xout=atdf,rule=2)$y)
axis(3,at=atdf,labels=prettydf,tcl=NA)
if(label){
nnz <- length(which)
xpos <- max(index)
pos <- 4
if(xvar=="lambda"){
xpos <- min(index)
pos <- 2
}
xpos <- rep(xpos,nnz)
ypos <- abs(beta[,ncol(beta)])
text(xpos,ypos,paste(which),cex=.5,pos=pos)
}
}
nonzeroCoef <- function (beta, bystep = FALSE) {
### bystep = FALSE means which variables were ever nonzero
### bystep = TRUE means which variables are nonzero for each step
nr <- nrow(beta)
if (nr == 1) {#degenerate case
if (bystep)
apply(beta, 2, function(x) if (abs(x) > 0)
1
else NULL)
else {
if (any(abs(beta) > 0))
1
else NULL
}
}
else {
beta <- abs(beta)>0 # this is sparse
which <- seq(nr)
ones <- rep(1,ncol(beta))
nz <- as.vector((beta%*%ones)>0)
which <- which[nz]
if (bystep) {
if(length(which)>0){
beta <- as.matrix(beta[which,,drop=FALSE])
nzel <- function(x, which) if (any(x))
which[x]
else NULL
which <- apply(beta, 2, nzel, which)
if(!is.list(which))which=data.frame(which)# apply can return a matrix!!
which
}
else{
dn <- dimnames(beta)[[2]]
which <- vector("list",length(dn))
names(which) <- dn
which
}
}
else which
}
}
plot.classo <- function(x, xvar=c("norm","lambda"),label=FALSE,...){
# xvar <- match.arg(xvar)
plotCoef(x$beta,lambda=x$lambda,df=x$df,dev=x$dev.ratio,label=label,xvar=xvar,...)
}
plot.classo(fit)
plot.classo(fit)
plotCoef <- function(beta,norm,lambda,df,dev,label=FALSE,
xvar=c("norm","lambda"),xlab=iname,...){
##beta should be in "dgCMatrix" format
which <- nonzeroCoef(beta)
nwhich <- length(which)
switch(nwhich+1,#we add one to make switch work
"0"={warning("No plot produced since all coefficients zero")
return()
},
"1"=warning("1 or less nonzero coefficients; classo plot is not meaningful")
)
beta <- as.matrix(beta[which,,drop=FALSE])
# ------------------------------------------------ #
xvar<-match.arg(xvar)
switch(xvar,
"norm"={
index=if(missing(norm))apply(abs(beta),2,sum)else norm
iname="L1 Norm"
approx.f=1
},
"lambda"={
index=log(lambda)
iname="Log Lambda"
approx.f=0
}
# "dev"= {
#   index=dev
#   iname="Fraction Deviance Explained"
#   approx.f=1
# }
)
# ------------------------------------------------ #
dotlist <- list(...)
type <- dotlist$type
if(is.null(type)){
par(mfrow=c(2,1), oma=c(0,0,2,0))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",type="l",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",type="l",...)
} else {
par(mfrow=c(2,1), oma=c(0,0,2,0))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",...)
}
par()
atdf <- pretty(index)
# ------------------------------------------------ #
### compute df by interpolating to df at next smaller lambda
prettydf <- approx(x=index,y=df,xout=atdf,rule=2,method="constant",f=approx.f)$y
# prettydf=ceiling(approx(x=index,y=df,xout=atdf,rule=2)$y)
axis(3,at=atdf,labels=prettydf,tcl=NA)
if(label){
nnz <- length(which)
xpos <- max(index)
pos <- 4
if(xvar=="lambda"){
xpos <- min(index)
pos <- 2
}
xpos <- rep(xpos,nnz)
ypos <- abs(beta[,ncol(beta)])
text(xpos,ypos,paste(which),cex=.5,pos=pos)
}
}
plot.classo(fit)
plotCoef <- function(beta,norm,lambda,df,dev,label=FALSE,
xvar=c("norm","lambda"),xlab=iname,...){
##beta should be in "dgCMatrix" format
which <- nonzeroCoef(beta)
nwhich <- length(which)
switch(nwhich+1,#we add one to make switch work
"0"={warning("No plot produced since all coefficients zero")
return()
},
"1"=warning("1 or less nonzero coefficients; classo plot is not meaningful")
)
beta <- as.matrix(beta[which,,drop=FALSE])
# ------------------------------------------------ #
xvar<-match.arg(xvar)
switch(xvar,
"norm"={
index=if(missing(norm))apply(abs(beta),2,sum)else norm
iname="L1 Norm"
approx.f=1
},
"lambda"={
index=log(lambda)
iname="Log Lambda"
approx.f=0
}
# "dev"= {
#   index=dev
#   iname="Fraction Deviance Explained"
#   approx.f=1
# }
)
# ------------------------------------------------ #
dotlist <- list(...)
type <- dotlist$type
if(is.null(type)){
par(mfrow=c(2,1),mar=c(4,4,2,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",type="l",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",type="l",...)
} else {
par(mfrow=c(2,1),mar=c(4,4,2,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",...)
}
par()
atdf <- pretty(index)
# ------------------------------------------------ #
### compute df by interpolating to df at next smaller lambda
prettydf <- approx(x=index,y=df,xout=atdf,rule=2,method="constant",f=approx.f)$y
# prettydf=ceiling(approx(x=index,y=df,xout=atdf,rule=2)$y)
axis(3,at=atdf,labels=prettydf,tcl=NA)
if(label){
nnz <- length(which)
xpos <- max(index)
pos <- 4
if(xvar=="lambda"){
xpos <- min(index)
pos <- 2
}
xpos <- rep(xpos,nnz)
ypos <- abs(beta[,ncol(beta)])
text(xpos,ypos,paste(which),cex=.5,pos=pos)
}
}
plot.classo(fit)
plotCoef <- function(beta,norm,lambda,df,dev,label=FALSE,
xvar=c("norm","lambda"),xlab=iname,...){
##beta should be in "dgCMatrix" format
which <- nonzeroCoef(beta)
nwhich <- length(which)
switch(nwhich+1,#we add one to make switch work
"0"={warning("No plot produced since all coefficients zero")
return()
},
"1"=warning("1 or less nonzero coefficients; classo plot is not meaningful")
)
beta <- as.matrix(beta[which,,drop=FALSE])
# ------------------------------------------------ #
xvar<-match.arg(xvar)
switch(xvar,
"norm"={
index=if(missing(norm))apply(abs(beta),2,sum)else norm
iname="L1 Norm"
approx.f=1
},
"lambda"={
index=log(lambda)
iname="Log Lambda"
approx.f=0
}
# "dev"= {
#   index=dev
#   iname="Fraction Deviance Explained"
#   approx.f=1
# }
)
# ------------------------------------------------ #
dotlist <- list(...)
type <- dotlist$type
if(is.null(type)){
par(mfrow=c(2,1),mar=c(3,3,2,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",type="l",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",type="l",...)
} else {
par(mfrow=c(2,1),mar=c(3,3,2,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",...)
}
par()
atdf <- pretty(index)
# ------------------------------------------------ #
### compute df by interpolating to df at next smaller lambda
prettydf <- approx(x=index,y=df,xout=atdf,rule=2,method="constant",f=approx.f)$y
# prettydf=ceiling(approx(x=index,y=df,xout=atdf,rule=2)$y)
axis(3,at=atdf,labels=prettydf,tcl=NA)
if(label){
nnz <- length(which)
xpos <- max(index)
pos <- 4
if(xvar=="lambda"){
xpos <- min(index)
pos <- 2
}
xpos <- rep(xpos,nnz)
ypos <- abs(beta[,ncol(beta)])
text(xpos,ypos,paste(which),cex=.5,pos=pos)
}
}
plotCoef <- function(beta,norm,lambda,df,dev,label=FALSE,
xvar=c("norm","lambda"),xlab=iname,...){
##beta should be in "dgCMatrix" format
which <- nonzeroCoef(beta)
nwhich <- length(which)
switch(nwhich+1,#we add one to make switch work
"0"={warning("No plot produced since all coefficients zero")
return()
},
"1"=warning("1 or less nonzero coefficients; classo plot is not meaningful")
)
beta <- as.matrix(beta[which,,drop=FALSE])
# ------------------------------------------------ #
xvar<-match.arg(xvar)
switch(xvar,
"norm"={
index=if(missing(norm))apply(abs(beta),2,sum)else norm
iname="L1 Norm"
approx.f=1
},
"lambda"={
index=log(lambda)
iname="Log Lambda"
approx.f=0
}
# "dev"= {
#   index=dev
#   iname="Fraction Deviance Explained"
#   approx.f=1
# }
)
# ------------------------------------------------ #
dotlist <- list(...)
type <- dotlist$type
if(is.null(type)){
par(mfrow=c(2,1),mar=c(3,4,1,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",type="l",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",type="l",...)
} else {
par(mfrow=c(2,1),mar=c(3,4,1,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Real)",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Imaginary)",...)
}
par()
atdf <- pretty(index)
# ------------------------------------------------ #
### compute df by interpolating to df at next smaller lambda
prettydf <- approx(x=index,y=df,xout=atdf,rule=2,method="constant",f=approx.f)$y
# prettydf=ceiling(approx(x=index,y=df,xout=atdf,rule=2)$y)
axis(3,at=atdf,labels=prettydf,tcl=NA)
if(label){
nnz <- length(which)
xpos <- max(index)
pos <- 4
if(xvar=="lambda"){
xpos <- min(index)
pos <- 2
}
xpos <- rep(xpos,nnz)
ypos <- abs(beta[,ncol(beta)])
text(xpos,ypos,paste(which),cex=.5,pos=pos)
}
}
plot.classo(fit)
plot.classo(fit)
plot.classo(fit)
plotCoef <- function(beta,norm,lambda,df,dev,label=FALSE,
xvar=c("norm","lambda"),xlab=iname,...){
##beta should be in "dgCMatrix" format
which <- nonzeroCoef(beta)
nwhich <- length(which)
switch(nwhich+1,#we add one to make switch work
"0"={warning("No plot produced since all coefficients zero")
return()
},
"1"=warning("1 or less nonzero coefficients; classo plot is not meaningful")
)
beta <- as.matrix(beta[which,,drop=FALSE])
# ------------------------------------------------ #
xvar<-match.arg(xvar)
switch(xvar,
"norm"={
index=if(missing(norm))apply(abs(beta),2,sum)else norm
iname="L1 Norm"
approx.f=1
},
"lambda"={
index=log(lambda)
iname="Log Lambda"
approx.f=0
}
# "dev"= {
#   index=dev
#   iname="Fraction Deviance Explained"
#   approx.f=1
# }
)
# ------------------------------------------------ #
dotlist <- list(...)
type <- dotlist$type
if(is.null(type)){
par(mfrow=c(2,1),mar=c(3,4,1,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Re)",type="l",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Im)",type="l",...)
} else {
par(mfrow=c(2,1),mar=c(3,4,1,2))
matplot(index,t(Re(beta)),lty=1,xlab=xlab,ylab="Coefficients (Re)",...)
matplot(index,t(Im(beta)),lty=1,xlab=xlab,ylab="Coefficients (Im)",...)
}
par()
atdf <- pretty(index)
# ------------------------------------------------ #
### compute df by interpolating to df at next smaller lambda
prettydf <- approx(x=index,y=df,xout=atdf,rule=2,method="constant",f=approx.f)$y
# prettydf=ceiling(approx(x=index,y=df,xout=atdf,rule=2)$y)
axis(3,at=atdf,labels=prettydf,tcl=NA)
if(label){
nnz <- length(which)
xpos <- max(index)
pos <- 4
if(xvar=="lambda"){
xpos <- min(index)
pos <- 2
}
xpos <- rep(xpos,nnz)
ypos <- abs(beta[,ncol(beta)])
text(xpos,ypos,paste(which),cex=.5,pos=pos)
}
}
plot.classo(fit)
library(devtools)
library(roxygen2)
library(cxreg)
remove.packages("cxreg")
library(devtools)
library(devtools)
devtools::install_github("yk748/cxreg")

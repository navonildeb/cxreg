((t-1)*dim(X)[2]+i)
i=2
((t-1)*dim(X)[2]+i)
i=3
((t-1)*dim(X)[2]+i)
t=1
i=1
(t*dim(X)[2]+i)
i=2
(t*dim(X)[2]+i)
i=3
(t*dim(X)[2]+i)
# ------------------------------------------------------------- #
# ------------------------------------------------------------- #
X_aug <- array(0,dim=c(dim(X)[1],dim(X)[1]*dim(X)[2]))
for (t in 1:dim(X)[1]){
X_aug[t,((t-1)*dim(X)[2]+1):(t*dim(X)[2])] <- t(scale(X)[t,])
}
D_aug <- array(0,dim=c( (dim(X)[1]-1)*dim(X)[2],dim(X)[1]*dim(X)[2] ))
for (t in 1:(dim(X)[1]-1)){
for (i in 1:dim(X)[2]){
D_aug[((t-1)*dim(X)[2]+i),((t-1)*dim(X)[2]+i)] <- 1
D_aug[((t-1)*dim(X)[2]+i),(t*dim(X)[2]+i)] <- -1
}
}
superheat(D_aug)
superheat(D_aug,heat.col.scheme = "red")
fold <- 10
MSE_fused <- vector("numeric",fold)
beta_hat_train <- array(NA,dim=c(fold,dim(X)[1]*dim(X)[2]))
for (k in 1:fold){
if (k == 1){
sample_idx <- 1:dim(X)[1]
}
test_idx <- sort(sample(sample_idx,round(dim(X)[1]/fold),replace=FALSE))
train_idx <- c(1:dim(X)[1])[-test_idx]
sample_idx <- sample_idx[-c(test_idx)]
fuse_fit_train <- genlasso(y=Y_adj[train_idx],X=X_aug[train_idx,],D=D_aug)
MSE_train <- vector("numeric",length=length(fuse_fit_train$lambda))
for (l in 1:length(fuse_fit_train$lambda)){
MSE_train[l] <- norm(Y_adj[train_idx]
- X_aug[train_idx,] %*% fuse_fit_train$beta[,l],"2")
}
beta_hat_train[k,] <- fuse_fit_train$beta[,which.min(MSE_train)]
Y_hat_test <- X_aug[test_idx,] %*% beta_hat_train[k,]
MSE_fused[k] <- norm(Y_adj[test_idx] - Y_hat_test,"2")
}
polyroot(c(1,0.2,-0.48))
(-0.2 + sqrt(0.2^2+4*0.48))/(-2*0.48)
(-0.2 - sqrt(0.2^2+4*0.48))/(-2*0.48)
z1 <- (-0.2 + sqrt(0.2^2+4*0.48))/(-2*0.48)
z2 <- (-0.2 - sqrt(0.2^2+4*0.48))/(-2*0.48)
LHS <- matrix(c(1,1,z1^(-1),z2^(-1)),byrow=TRUE,ncol=2)
phi1 <- -0.2
phi2 <- 0.48
RHS <- c(1,phi1/(1-phi2))
solve(LHS) %*% RHS
c <- solve(LHS) %*% RHS
hh <- 0:20
c[1]*z1^(-hh) + c[2]*z2^(-hh)
ARMAacf(ar=c(phi1,phi2))
ARMAacf(ar=c(phi1,phi2),lag.max=20)
plot(ARMAacf(ar=c(phi1,phi2),lag.max=20))
plot(ARMAacf(ar=c(phi1,phi2),lag.max=20),type="l")
lines(c[1]*z1^(-hh) + c[2]*z2^(-hh),col="red")
polyroot(c(1,0.2,0.48))
z <- polyroot(c(1,0.2,0.48))
1/z
LHS <- matrix(c(1,1,z[1]^(-1),z[2]^(-1)),byrow=TRUE,ncol=2)
phi2 <- -phi2
RHS <- c(1,phi1/(1-phi2))
c[1]*z1^(-hh) + c[2]*z2^(-hh)
plot(ARMAacf(ar=c(phi1,phi2),lag.max=20),type="l")
lines(c[1]*z1^(-hh) + c[2]*z2^(-hh),col="red")
c
LHS
abs(z)
z2
z1
z
1/z
LHS <- matrix(c(1,1,z[1]^(-1),z[2]^(-1)),byrow=TRUE,ncol=2)
LHS
RHS
phi1
phi2
solve(LHS) %*% RHS
c <- solve(LHS) %*% RHS
plot(ARMAacf(ar=c(phi1,phi2),lag.max=20),type="l")
lines(c[1]*z[1]^(-hh) + c[2]*z[2]^(-hh),col="red")
c[1]*z[1]^(-hh) + c[2]*z[2]^(-hh)
plot(ARMAacf(ar=c(phi1,phi2),lag.max=20),type="l")
lines(c[1]*z[1]^(-hh) + c[2]*z[2]^(-hh),col="red")
lines(Re(c[1]*z[1]^(-hh) + c[2]*z[2]^(-hh)),col="red")
phi1 <- -1.8
phi2 <- -0.81
z <- polyroot(c(1,-phi1,-phi2))
z
LHS <- matrix(c(1,1,z[1]^(-1),z[2]^(-1)),byrow=TRUE,ncol=2)
RHS <- c(1,phi1/(1-phi2))
solve(LHS) %*% RHS
c1 <- 1
c1 - (phi1/(1-phi2))/(z[1]^(-1))
c2 <- c1 - (phi1/(1-phi2))/(z[1]^(-1))
z[1]^(-hh)*(c1+c2*hh)
plot(ARMAacf(ar=c(phi1,phi2)),lag.max=20)
plot(ARMAacf(ar=c(phi1,phi2),lag.max=20),type="l")
lines(z[1]^(-hh)*(c1+c2*hh),col="red")
lines(Re(z[1]^(-hh)*(c1+c2*hh)),col="red")
phi1
phi2
z1
z
z0 <- z[1]
z0
z0 <- Re(z[1])
c1 <- 1
c2 <- c1 + phi1/(1-phi2)*(1/z0)
c2
z0^(-hh)*(c1+c2*hh)
c2 <- c1 - phi1/(1-phi2)*(1/z0)
c2
z0^(-hh)*(c1+c2*hh)
plot(ARMAacf(ar=c(phi1,phi2),lag.max=20),type="l")
lines(z0^(-hh)*(c1+c2*hh),col="red")
library(glmnet)
glmnet::glmnet
cv.glmnet
?arima.sim
xt <- arima.sim(n = 400, list(ar = 0.7)
xt <- arima.sim(n = 400, list(ar = 0.7))
acf(xt[1:200],lag.max=30)
par(mfrow=c(1,2))
acf(xt[1:200],lag.max=30)
acf(xt[1:400],lag.max=30)
par(mfrow=c(1,2))
acf(xt[1:100],lag.max=30)
acf(xt[1:400],lag.max=30)
install.packages("AER")
library(AER)
Pepperprice
PepperPrice
data(PepperPrice)
plot.ts(PepperPrice[,1])
plot.ts(PepperPrice[,2])
library(astsa)
library(fpp2)
library(fpp2)
?cmort
plot.ts(tmort)
plot.ts(rmort)
plot.ts(cmort)
plot.ts(ozone)
plot.ts(astsa::co2)
plot.ts(hycarb)
plot.ts(rh)
?
uschange
plot.ts(uschange)
load("D:/STSCI4550/Project/Selected.Rdata")
plot.ts(Econ)
?fpp3::us_change
?fpp2::hyndsight
?debitcards
load("D:/STSCI4550/Project/Selected.Rdata")
plot.ts(Salmon)
devtools::build github devtools()
install.packages(‘devtools’)
install.packages("devtools")
devtools::build github devtools()
library(urca)
?ca.jo()
?ca.jo
ca.jo
getwd()
library(devtools)
library(roxygen2)
devtools::create("D:/High-dimensional time series/SSPM/test/myfirstpackage")
devtools::document()
devtools::document()
library(cglasso)
remove.packages("cglasso")
install_github(repo="yk748/cglasso")
library(devtools)
usethis::use_git_config(user.name = "yk748", user.email = "yk748@cornell.edu")
usethis::create_github_token()
credentials::set_github_pat()
credentials::set_github_pat("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")
credentials::set_github_pat()
devtools::install_github("yk748/cglasso",
ref = "main",
auth_token = Sys.getenv("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"))
install_github(repo="yk748/cglasso")
install_github("yk748/cglasso")
# Main functions for application
#################################################################################
rm(list=ls())
# load packages:
library("polynom")
library("matlib")
library("latex2exp")
library("ggplot2")
library("patchwork")
library("reshape2")
library("mvtnorm")
library("MASS")
library("TruncatedNormal")
library("psych")
library("GPArotation")
library("Matrix")
# load source files:
load(file = "Polys.rda")
#################################################################################
# Preprocessing:
#################################################################################
borkenau_raw <- readRDS("borkenau1998.RDS")
rm(list=ls())
##########################################################
# package (functions) loading:
# glmnet:
library("glmnet")
# grplasso:
library("grplasso")
# gglasso:
library("gglasso")
# R version functions:
source('library_test.R')
rm(list=ls())
##########################################################
# package (functions) loading:
# glmnet:
library("glmnet")
# grplasso:
library("grplasso")
# gglasso:
library("gglasso")
# R version functions:
source('library_test.R')
getwd()
install.packages("devtools")
library("devtools")
# devtools::install_github("sumbose/iRF")
devtools::install_github("karlkumbier/iRF2.0")
# devtools::install_github("sumbose/iRF")
devtools::install_github("karlkumbier/iRF")
install.packages("devtools")
library("devtools")
install.packages("devtools")
# devtools::install_github("sumbose/iRF")
devtools::install_github("karlkumbier/iRF2.0")
library("iRF")
?irf
?iRF
?iRF::iRF()
iRF(xtrain,ytrain,x.test=xtest)
library("ISLR2")
library("randomForest")
set.seed(1)
train <- sample(1:nrow(Boston), nrow(Boston)/2)
boston.test <- Boston [-train, "medv"]
# mtry: # of predictors
# ntree: # of trees grown
bag.boston <- randomForest(medv~., data=Boston, subset=train , mtry=12 , importance=TRUE)
# bag.boston <- randomForest(medv~., data=Boston, subset=train , mtry=12 , ntree=25)
yhat.bag <- predict(bag.boston, newdata=Boston[-train, ])
plot(yhat.bag, boston.test)
abline(0,1)
mean((yhat.bag - boston.test)^2)
# Use p/3 variables for regression trees, sqrt(p) variables for classification trees
rf.boston <- randomForest(medv~., data=Boston, subset=train , mtry=6 , importance=TRUE)
yhat.rf <- predict(rf.boston , newdata=Boston [-train, ])
plot(yhat.rf, boston.test)
abline(0,1)
mean((yhat.rf - boston.test)^2)
library("gbm")
# Ifbinary classification  problem, use distribution="bernoulli"
# interation.depth: depth of each tree
boost.boston <- gbm(medv~., data=Boston[train, ], distribution="gaussian", n.trees=5000 ,
interaction.depth = 4)
summary(boost.boston)
yhat.boost <- predict(boost.boston, newdata=Boston[-train, ], n.trees=5000)
mean((yhat.boost - boston.test)^2)
# partial dependence plots
# plot along the variable
plot(boost.boston, i="rm")
plot(boost.boston, i="lstat")
library("BART")
#  must first create matrices of predictors for the training and test data
x <- Boston[, 1:12]
y <- Boston[, "medv"]
xtrain <- x[train, ]
ytrain <- y[train]
xtest <- x[-train, ]
ytest <- y[-train]
# For binary outcomes, lbart() and pbart() are available
bartfit <- gbart(xtrain, ytrain, x.test=xtest)
yhat.bart <- bartfit$yhat.test.mean
mean((ytest - yhat.bart)^2)
ord <- order(bartfit$varcount.mean, decreasing=T)
bartfit$varcount.mean[ord]
install.packages("devtools")
library("devtools")
# devtools::install_github("sumbose/iRF")
devtools::install_github("karlkumbier/iRF2.0")
1# install.packages("D:/Time series machine learning/Change point detection (CPD)/Code/iRF-master.zip", repos = NULL, type = "source")
install.packages("D:/Time series machine learning/Change point detection (CPD)/Code/iRF_2.0.0.tar", repos = NULL, type = "source")
library("iRF")
install.packages("devtools")
iRF(xtrain,ytrain,x.test=xtest)
# install.packages("devtools")
# library("devtools")
# devtools::install_github("sumbose/iRF")
# devtools::install_github("karlkumbier/iRF2.0")
# install.packages("D:/Time series machine learning/Change point detection (CPD)/Code/iRF-master.zip", repos = NULL, type = "source")
# install.packages("D:/Time series machine learning/Change point detection (CPD)/Code/iRF_2.0.0.tar", repos = NULL, type = "source")
library("iRF")
irf.fit <- iRF(xtrain,ytrain,x.test=xtest)
irf.fit$weights
irf.fit$rf.list
rf.boston
irf.fit$rf.list$call
irf.fit$rf.list$type
irf.fit$rf.list$forest
irf.fit$rf.list$feature.nodes
irf.fit$rf.list$importanceSD
irf.fit$rf.list$coefs
irf.fit$rf.list$test
irf.fit$rf.list$predicted
dim(xtest)
irf.fit$rf.list$y
irf.fit <- iRF(xtrain,ytrain,x.test=xtest,y.test=ytest)
irf.fit$rf.list$y
irf.fit$rf.list$predicted
irf.fit$rf.list$rsq
irf.fit$rf.list$oob.times
irf.fit$rf.list$y
irf.fit$rf.list$inbag
dim(irf.fit$rf.list$inbag)
dim(ytest)
dim(xtest)
superheat::superheat(irf.fit$rf.list$inbag)
irf.fit$rf.list$test
irf.fit$rf.list$call
library("iRF")
irf.fit <- iRF(xtrain,ytrain,x.test=xtest,y.test=ytest)
irf.fit$rf.list
irf.fit$rf.list$call
irf.fit$weights
library(AUC)
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
library(roxygen2)
package.skeleton("cglasso")
getwd()
getwd("D:\High-dimensional time series\SSPM\cglasso")
setwd("D:\High-dimensional time series\SSPM\cglasso")
setwd("D:\High-dimensional time series\SSPM\cglasso")
setwd("D:/High-dimensional time series/SSPM/cglasso")
setwd("D:/High-dimensional time series/SSPM/cglasso")
package.skeleton("cglasso")
setwd("D:/High-dimensional time series/SSPM")
package.skeleton("cglasso")
package.skeleton("cglasso")
setwd("D:/High-dimensional time series/SSPM/cglasso")
package.skeleton("cglasso")
getwd()
package.skeleton("cglasso")
getwd()
setwd("D:/High-dimensional time series/SSPM")
library(devtools)
library(roxygen2)
package.skeleton("cglasso")
package.skeleton(name="cglasso")
package.skeleton(name="cglasso")
character()
devtools::document()
setwd("D:/High-dimensional time series/SSPM/R")
setwd("D:/High-dimensional time series/SSPM/cglasso/R")
package.skeleton("cglasso")
package.skeleton("cglasso", environment = .GlobalEnv)
devtools::install_github("Dschaykib/newsmd")
library(newsmd)
news$new()
?news
my_news <- news$new(
text = c("Note that this starts from version 'cxreg_0.1.0'"),
version = "0.1.0",
file = NULL
)
my_news
my_news <- newsmd()
my_news
my_news <- news$new(
text = c("Note that this starts from version 'cxreg_0.1.0'"),
version = "0.1.0",
file = NULL
)
my_news$get_text()
my_news$add_version("0.1.0")
my_news$get_text()
library(cxreg)
getwd()
setwd("D:/High-dimensional time series/SSPM/cxreg")
library(devtools)
library(roxygen2)
usethis::use_description(fields = list(
Package = "cxreg",
Title = "Complex-Valued Lasso and Complex-Valued Graphical Lasso",
Version = "1.0.0",
`Authors@R` = c(
person("Younghoon", "Kim", email = "yk748@cornell.edu", role = c("aut", "cre")),
person("Navonil", "Deb", role = "aut"),
person("Sumanta", "Basu", role = "ctb")
),
Description = "Implements 'glmnet'-style complex-valued lasso and complex-valued graphical lasso using a 'pathwise' coordinate descent algorithm for complex-valued parameters. The package provides supporting tools for estimation, simulation, and prediction. The algorithms are described in Deb et al. (2024) <https://doi.org/10.48550/ArXiv.2401.11128>",
License = "MIT + file LICENSE",
Depends = "R (>= 3.5.0)",
Imports = paste(c("fields", "foreach", "gdata", "grDevices", "Matrix", "methods", "mvtnorm", "Rcpp", "stats"), collapse = ","),
Suggests = paste(c("devtools", "knitr", "rmarkdown", "xfun"), collapse = ","),
VignetteBuilder = "knitr",
Encoding = "UTF-8",
Roxygen = "list(markdown = TRUE)",
RoxygenNote = "7.3.2"
))
library(glment)
library(glmnet)
glmnet::buildPredmat()
?glmnet::buildPredmat
getwd()
library(devtools)
library(roxygen2)
document()
load_all()
check()
library(roxygen2)
library(devtools)
document()
load_all()
check()
library(devtools)
library(roxygen2)
document()
load_all()
library(rmarkdown)
getwd()
render("paper.Rmd",
output_format = "md_document",
output_file = "paper.md")
render("paper.Rmd",
output_format = "md_document",
output_file = "paper.md")
render("paper.Rmd",
output_format = "md_document",
output_file = "paper.md")
library(rmarkdown)
render("paper.Rmd",
output_format = "md_document",
output_file = "paper.md")
render("paper.Rmd",
output_format = "md_document",
output_options = list(
variant = "gfm",   # GitHub-Flavored Markdown
pandoc_args = "--mathjax"
))
rmarkdown::render(
"paper.Rmd",
output_format = "md_document",
output_file = "paper.md",
output_options = list(
variant = "gfm",
pandoc_args = c("--mathjax", "--standalone") # Keep raw LaTeX + YAML
)
)
rmarkdown::render(
"paper.Rmd",
output_format = rmarkdown::md_document(
variant = "gfm",               # GitHub-flavored Markdown, or remove if not needed
pandoc_args = c("--standalone") # This keeps the YAML header in the output
),
output_file = "paper.md"
)
rmarkdown::render(
"your_file.Rmd",
output_format = rmarkdown::md_document(
variant = "markdown_strict",      # use markdown_strict variant to preserve YAML
pandoc_args = c("--standalone")   # keep YAML front matter intact
),
output_file = "your_file.md"
)
rmarkdown::render(
"paper.Rmd",
output_format = rmarkdown::md_document(
variant = "markdown_strict",      # use markdown_strict variant to preserve YAML
pandoc_args = c("--standalone")   # keep YAML front matter intact
),
output_file = "paper.md"
)
rmarkdown::render(
"paper.Rmd",
output_format = rmarkdown::md_document(
variant = "markdown_strict",    # preserves YAML front matter
pandoc_args = "--standalone"    # crucial to keep YAML in output
),
output_file = "paper.md"
)
library(rmarkdown)
render(
input = "paper.Rmd",
output_format = md_document(variant = "markdown_strict", pandoc_args = "--standalone"),
output_file = "paper.md"
)
